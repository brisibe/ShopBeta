// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopBeta.Infrastructure.Repository;

namespace ShopBeta.Api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20201031214306_seedDb")]
    partial class seedDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShopBeta.Core.Models.Products", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("OldPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            productId = 1,
                            Brand = "Apple",
                            Category = "Phones",
                            Description = "500Gb rom, 12mp rear camera, blah blah blah",
                            Name = "Iphone 12",
                            OldPrice = "850,000",
                            Price = "800,000"
                        },
                        new
                        {
                            productId = 2,
                            Brand = "Samsung",
                            Category = "Phones",
                            Description = "500Gb rom, 12mp rear camera, blah blah blah",
                            Name = "Samsung Galaxy s11",
                            OldPrice = "650,000",
                            Price = "500,000"
                        },
                        new
                        {
                            productId = 3,
                            Brand = "Sony",
                            Category = "Gaming",
                            Description = "500Gb hdd,  dual controller, lah blah blah",
                            Name = "Playstation 5",
                            OldPrice = "250,000",
                            Price = "200,000"
                        },
                        new
                        {
                            productId = 4,
                            Brand = "Acer",
                            Category = "Computer",
                            Description = "500Gb ROM, 8Gb RAM, Nvidia gtx 1020, core i7",
                            Name = "Acer Aspire E5",
                            OldPrice = "420,000",
                            Price = "400,000"
                        });
                });

            modelBuilder.Entity("ShopBeta.Core.Models.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "A wonderful product, swift delivery",
                            Name = "Bode Thomas",
                            ProductId = 1,
                            date = new DateTime(2020, 10, 31, 21, 43, 5, 487, DateTimeKind.Utc).AddTicks(8396)
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Great product but expensive",
                            Name = "Tunde Brisibe",
                            ProductId = 1,
                            date = new DateTime(2020, 10, 31, 21, 43, 5, 487, DateTimeKind.Utc).AddTicks(9867)
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "wonderful laptop",
                            Name = "Jesse Brisibe",
                            ProductId = 4,
                            date = new DateTime(2020, 10, 31, 21, 43, 5, 487, DateTimeKind.Utc).AddTicks(9902)
                        });
                });

            modelBuilder.Entity("ShopBeta.Core.Models.Reviews", b =>
                {
                    b.HasOne("ShopBeta.Core.Models.Products", "Product")
                        .WithMany("reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
